#!/usr/bin/env node

var fs = require('fs');
var glob = require('glob');
var shuffle = require('knuth-shuffle').knuthShuffle;
var request = require('request');

const BATCH_SIZE = 5;
const BATCH_WAIT = 500;
const REQ_TIMEOUT = 40000;

/**
 *  Load Tester for imageservers
 *
 *  Usage:
 *
 *      load_test ENDPOINT_URL REQUEST_DIR
 *
 *      ENDPOINT_URL is the URL to the image generation endpoint.
 *
 *      REQUEST_DIR is a directory containing sorted requests:
 *        REQUEST_DIR/success/*  -  requests expected to succeed
 *        REQUEST_DIR/failure/*  -  requests expected to fail
 *
 */
var endpointUrl = process.argv[2];
var requestDir = process.argv[3];

var failReqs = getRequests(requestDir + '/failure/*', {'success': false});
var successReqs = getRequests(requestDir + '/success/*', {'success': true});
var allReqs = failReqs.concat(successReqs);

var errors = 0;
var successes = 0;
var startTime = Date.now();

/**
 * Return object containing paths to all requests matching the glob.
 *
 * @param {string} requestGlob
 * @param {Object}  extraObj - data in this object will be appended to each match
 */
function getRequests(requestGlob, extraObj) {
    var matches = glob.sync(requestGlob);

    return matches.map(function(match) {
        return Object.assign({"filename": match}, extraObj);
    });
}

if(allReqs.length === 0) {
    throw new Error('No requests found in ' + requestDir);
}

allReqs = shuffle(allReqs);

console.log('test run starting');
runInBatch(allReqs);

function runInBatch(reqs) {
    var running = 0;

    for(var i = 0; i < reqs.length; i++) {
        queueReq(reqs[i]);
    }

    function queueReq(req) {
        if(running >= BATCH_SIZE) {
            setTimeout(function() {
                queueReq(req);
            }, BATCH_WAIT);
            return;
        }
        running++;

        // throttle the number of tests running concurrently

        runReq(req, function() {
            running--;
        });
    }
}

/**
 * Run a test based on the request, then call the completion function
 *
 * @param {Object}   req - the request
 * @param {function} completion - function to run on completion, no args
 */
function runReq(req, completion) {
    var totalReqs = successes + errors;
    var totalTime = (Date.now() - startTime) / 1000;
    var rps = totalReqs / totalTime;
    console.log('successes: ' + successes + ', errors: ' + errors +
                ', total: ' + totalReqs + ', time: ' + totalTime +
                ', rps: ' + rps);

    function onResponse(response) {
        if(req.success && +response.statusCode !== 200) {
            console.log('Unexpected error response on ' + req.filename);
            errors++;
        } else {
            console.log('Success on ' + req.filename);
            successes++;
        }
        return completion();
    }

    function onError(err) {
        if(req.success) {
            console.log('Unexpected request failure on ' + req.filename + ': ' + err);
            errors++;
        } else {
            console.log('Expected failure on ' + req.filename);
            successes++;
        }

        return completion();
    }

    try {
        var body = require(req.filename);
    }
    catch(SyntaxError) {
        if(req.success) {
            console.log('Unexpected parse failure on ' + req.filename);
            errors++;
        } else {
            console.log('Expected parse failure on ' + req.filename);
            successes++;
        }

        return completion();
    }

    request.post({uri: endpointUrl, body: body, json: true, timeout: REQ_TIMEOUT})
        .on('error', onError)
        .on('response', onResponse);
}
